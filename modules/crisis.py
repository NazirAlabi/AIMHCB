import smtplib
import email.mime.text  
import email.mime.multipart
import time
import logging
import streamlit as st

def crisis(counselor_email, smtp_email, smtp_password, user_info, user_name, user_message, risk_score, alerts_path):
    # Create email message
        msg = email.mime.multipart.MIMEMultipart()
        msg['From'] = smtp_email
        msg['To'] = counselor_email
        msg['Subject'] = f"MENTAL HEALTH ALERT - {user_name} - Risk: {risk_score}/10"
        body = f"""MENTAL HEALTH CRISIS ALERT
                User: {user_name} ({user_info.get('email', 'Not provided')})
                Risk Score: {risk_score}/10
                Timestamp: {time.strftime('%Y-%m-%d %H:%M:%S')}

                User Message:
                "{user_message}"

                PLEASE FOLLOW UP IMMEDIATELY if this indicates a genuine crisis.

                This alert was automatically generated by the Mental Health Chatbot system.
                User's email: {user_info.get('email', 'Not provided')}
                User's phone: {user_info.get('phone', 'Not provided')}  
                """
        msg.attach(email.mime.text.MIMEText(body, 'plain'))

        # Send actual email using Gmail SMTP
        try:
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(smtp_email, smtp_password)
            text = msg.as_string()
            server.sendmail(smtp_email, counselor_email, text)
            server.quit()

            # Log success
            logging.info(f"✅ CRISIS EMAIL SENT: {user_name} ({user_info.get('email', 'Not provided')}) - Risk: {risk_score}/10")
            print(f"\n✅ CRISIS EMAIL SENT SUCCESSFULLY:")
            print(f"FROM: {smtp_email}")
            print(f"TO: {counselor_email}")
            print(f"USER: {user_name} ({user_info.get('email', 'Not provided')})")
            print(f"RISK: {risk_score}/10")
            print(f"TIMESTAMP: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
        except Exception as e:
            logging.error(f"❌ FAILED TO SEND CRISIS EMAIL: {e}")
        
            # Also log to file for backup
            alert_message = f"""
            FROM: {smtp_email}
            TO: {counselor_email}
            USER: {user_name} ({user_info.get('email', 'Not provided')})
            SUBJECT: {msg['Subject']}
            TIMESTAMP: {time.strftime('%Y-%m-%d %H:%M:%S')}

            {body}
            """

            with open(alerts_path, "a") as f:
                f.write(alert_message + "\n")
            return False

        return True

def display_crisis_intervention(risk_score, resources_1, resources_2):
    st.error(f"⚠️ HIGH RISK ALERT: Your recent messages indicate a high level of distress (Risk Score: {risk_score}/10). If you are in crisis, please seek immediate help:")
    st.markdown("### Crisis Resources")
    col1, col2 = st.columns(2)
    with col1:
        st.markdown(f"{resources_1}")
    with col2:
        st.markdown(f"{resources_2}")
    st.info("If you are not in immediate danger but need support, consider reaching out to a trusted friend, family member, or mental health professional.")